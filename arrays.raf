# 1.

def shiftLeft(s, k):
    for i in range(len(s) - k):
        s[i] = s[i+ k]
    

    for i in range(len(s) - k, len(s)):
        s[i] = 0


source = [10, 20, 30, 40, 50, 60]
shiftLeft(source, 3)

print(source)


# 2.

def shiftLeft(s, k):
    temp = []
    for i in range(0, k):
        temp.append(s[i])
        #print(s)
    for i in range(len(s) - k):
        s[i] = s[i + k]

    i = len(s) - k #6-3=3 #5
    j = 0
    while i <= len(s) - 1:
        s[i] = temp[j]
        i = i + 1
        j = j + 1


source = [10, 20, 30, 40, 50, 60]
shiftLeft(source, 3)
print(source)


# 3.

def remove(s, size, idx):
    for i in range(idx, size - 1):
        s[i] = s[i + 1]

    s[size - 1] = 0


source = [10, 20, 30, 40, 50, 0, 0]
remove(source, 5, 2)
print(source)


# 4.

def removeAll(s, size, remove):
    for i in range(size + 1):
        if s[i] == remove:
            s[i] = 0
    c = 0
    for j in range(size + 1):
        if s[j] != 0:
            s[c] = s[j]
            c = c + 1
    for k in range(c, size + 1):
        s[k] = 0


source = [10, 2, 30, 2, 50, 2, 2, 0, 0]
removeAll(source, 7, 2)
print(source)


# 5.

def check(s):
    for i in range(len(s)):
        s[i] = int(s[i])

    i = 0
    count = 0
    while i < len(s) - 1:
        sumL = 0
        sumR = 0

        for k in range(0, i + 1):
            sumL = sumL + s[k]
        for j in range(i + 1, len(s)):
            sumR = sumR + s[j]
        if sumL == sumR:
            count = count + 1
        i = i + 1

    if count == 0:
        return False
    else:
        return True


inp = input().split(", ")
result = check(inp)
print(result)


# 6.

def create(n):
    newArray = []
    i = 0
    j = 1

    while i < n:
        for k in range(0, n - j):
            newArray.append(0)
        for m in range(j, 0, -1):
            newArray.append(m)
        j = j + 1
        i = i + 1
    return newArray


inp = int(input())
array = create(inp)
print(array)

print("__________________")
# 7.

def checkMaxBunch(s):
    maxCount = 0
    count = 1
    for i in range(len(s) - 1):
        if s[i] == s[i + 1]:
            count = count + 1
            maxCount = count
        else:
            if maxCount < count:
                maxCount = count
            count = 1
    return maxCount


source = [1, 1, 2, 2, 1, 1, 1, 1]
result = checkMaxBunch(source)
print(result)

print("__________________")
# 8.

def checkRepetition(s):
    items = []
    for i in s:
        if i not in items:
            items.append(i)

    repeated = []
    for i in items:
        count = 0
        for j in s:
            if i == j:
                count = count + 1

        if count != 1:
            repeated.append(count)

    fRepeat = repeated[0]
    result = True

    for i in repeated:
        if i != fRepeat:
            result = False
            break
    print(result)


source = [4, 5, 6, 6, 4, 3, 6, 4]
checkRepetition(source)
print(source)

print("__________________")
# 9.

def checkPalindrome(s, start, size):
    Nlist = []
    i = 0
    index = start
    while i < size:
        Nlist.append(s[index])
        i = i + 1
        index = (index + 1) % len(s)

    j = 0
    k = len(Nlist) - 1
    count = 0
    while j < (size / 2):
        if Nlist[j] != Nlist[k]:
            count = 1
        j = j + 1
        k = k - 1

    if count == 0:
        print(True)
    else:
        print(False)


source = [20, 10, 0, 0, 0, 10, 20, 30]
checkPalindrome(source, 5, 5)


# 10.
print("__________________")
def checkIntersection(s1, start1, size1, s2, start2, size2):
    Nlist1 = []
    i = 0
    index = start1
    while i < size1:
        Nlist1.append(s1[index])
        i = i + 1
        index = (index + 1) % len(s1)

    Nlist2 = []
    i = 0
    index = start2
    while i < size2:
        Nlist2.append(s2[index])
        i = i + 1
        index = (index + 1) % len(s2)

    result = []
    for i in Nlist1:
        if i in Nlist2:
            result.append(i)

    print(result)


source1 = [40, 50, 0, 0, 0, 10, 20, 30]
source2 = [10, 20, 5, 0, 0, 0, 0, 0, 5, 40, 15, 25]
checkIntersection(source1, 5, 5, source2, 8, 7)